
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "TK_ASIG TK_DATAI TK_DATAS TK_FLT TK_LCOR TK_LNBK TK_LPAR TK_NAME TK_NAMEF TK_OPEA TK_OPED TK_OPEI TK_OPER TK_OPES TK_RCOR TK_RPAR TK_SGN\n    expression : declaration declaration declarationFuntion TK_LNBK\n    \n    declaration : declareS \n    | declareI\n    \n    declareS : TK_SGN TK_LCOR TK_NAME TK_RCOR TK_ASIG TK_DATAS TK_LNBK\n    \n    declareI : TK_FLT TK_LCOR TK_NAME TK_RCOR TK_ASIG TK_DATAI TK_LNBK\n    \n    declarationFuntion : declareBasicOp \n    | declareOp\n    \n    declareBasicOp : TK_OPER TK_LPAR TK_NAME TK_RPAR \n    \n    typeOperation : TK_OPED\n    | TK_OPES\n    | TK_OPEI\n    | TK_OPEA\n    \n    declareOp : typeOperation TK_LPAR TK_NAME ',' TK_NAME TK_RPAR \n    "
    
_lr_action_items = {'TK_SGN':([0,2,3,4,35,36,],[5,5,-2,-3,-4,-5,]),'TK_FLT':([0,2,3,4,35,36,],[6,6,-2,-3,-4,-5,]),'$end':([1,21,],[0,-1,]),'TK_OPER':([3,4,7,35,36,],[-2,-3,13,-4,-5,]),'TK_OPED':([3,4,7,35,36,],[-2,-3,15,-4,-5,]),'TK_OPES':([3,4,7,35,36,],[-2,-3,16,-4,-5,]),'TK_OPEI':([3,4,7,35,36,],[-2,-3,17,-4,-5,]),'TK_OPEA':([3,4,7,35,36,],[-2,-3,18,-4,-5,]),'TK_LCOR':([5,6,],[8,9,]),'TK_NAME':([8,9,22,23,31,],[19,20,26,27,34,]),'TK_LNBK':([10,11,12,30,32,33,37,],[21,-6,-7,-8,35,36,-13,]),'TK_LPAR':([13,14,15,16,17,18,],[22,23,-9,-10,-11,-12,]),'TK_RCOR':([19,20,],[24,25,]),'TK_ASIG':([24,25,],[28,29,]),'TK_RPAR':([26,34,],[30,37,]),',':([27,],[31,]),'TK_DATAS':([28,],[32,]),'TK_DATAI':([29,],[33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'declaration':([0,2,],[2,7,]),'declareS':([0,2,],[3,3,]),'declareI':([0,2,],[4,4,]),'declarationFuntion':([7,],[10,]),'declareBasicOp':([7,],[11,]),'declareOp':([7,],[12,]),'typeOperation':([7,],[14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> declaration declaration declarationFuntion TK_LNBK','expression',4,'p_expression','parse.py',15),
  ('declaration -> declareS','declaration',1,'p_declaration','parse.py',21),
  ('declaration -> declareI','declaration',1,'p_declaration','parse.py',22),
  ('declareS -> TK_SGN TK_LCOR TK_NAME TK_RCOR TK_ASIG TK_DATAS TK_LNBK','declareS',7,'p_declareS','parse.py',28),
  ('declareI -> TK_FLT TK_LCOR TK_NAME TK_RCOR TK_ASIG TK_DATAI TK_LNBK','declareI',7,'p_declareI','parse.py',34),
  ('declarationFuntion -> declareBasicOp','declarationFuntion',1,'p_declarationFuntion','parse.py',40),
  ('declarationFuntion -> declareOp','declarationFuntion',1,'p_declarationFuntion','parse.py',41),
  ('declareBasicOp -> TK_OPER TK_LPAR TK_NAME TK_RPAR','declareBasicOp',4,'p_declareBasicOp','parse.py',47),
  ('typeOperation -> TK_OPED','typeOperation',1,'p_typeOperation','parse.py',53),
  ('typeOperation -> TK_OPES','typeOperation',1,'p_typeOperation','parse.py',54),
  ('typeOperation -> TK_OPEI','typeOperation',1,'p_typeOperation','parse.py',55),
  ('typeOperation -> TK_OPEA','typeOperation',1,'p_typeOperation','parse.py',56),
  ('declareOp -> typeOperation TK_LPAR TK_NAME , TK_NAME TK_RPAR','declareOp',6,'p_declareOp','parse.py',61),
]
